package com.hassmedia.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hassmedia.entity.HomeUiBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_UI_BEAN".
*/
public class HomeUiBeanDao extends AbstractDao<HomeUiBean, Long> {

    public static final String TABLENAME = "HOME_UI_BEAN";

    /**
     * Properties of entity HomeUiBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tips = new Property(1, String.class, "tips", false, "TIPS");
        public final static Property TvMoreUrl = new Property(2, String.class, "tvMoreUrl", false, "TV_MORE_URL");
        public final static Property BgImg = new Property(3, String.class, "bgImg", false, "BG_IMG");
        public final static Property TemplateType = new Property(4, String.class, "templateType", false, "TEMPLATE_TYPE");
        public final static Property Logo = new Property(5, String.class, "logo", false, "LOGO");
        public final static Property BottomIcon = new Property(6, String.class, "bottomIcon", false, "BOTTOM_ICON");
    }


    public HomeUiBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeUiBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_UI_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIPS\" TEXT," + // 1: tips
                "\"TV_MORE_URL\" TEXT," + // 2: tvMoreUrl
                "\"BG_IMG\" TEXT," + // 3: bgImg
                "\"TEMPLATE_TYPE\" TEXT," + // 4: templateType
                "\"LOGO\" TEXT," + // 5: logo
                "\"BOTTOM_ICON\" TEXT);"); // 6: bottomIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_UI_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeUiBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(2, tips);
        }
 
        String tvMoreUrl = entity.getTvMoreUrl();
        if (tvMoreUrl != null) {
            stmt.bindString(3, tvMoreUrl);
        }
 
        String bgImg = entity.getBgImg();
        if (bgImg != null) {
            stmt.bindString(4, bgImg);
        }
 
        String templateType = entity.getTemplateType();
        if (templateType != null) {
            stmt.bindString(5, templateType);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(6, logo);
        }
 
        String bottomIcon = entity.getBottomIcon();
        if (bottomIcon != null) {
            stmt.bindString(7, bottomIcon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeUiBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(2, tips);
        }
 
        String tvMoreUrl = entity.getTvMoreUrl();
        if (tvMoreUrl != null) {
            stmt.bindString(3, tvMoreUrl);
        }
 
        String bgImg = entity.getBgImg();
        if (bgImg != null) {
            stmt.bindString(4, bgImg);
        }
 
        String templateType = entity.getTemplateType();
        if (templateType != null) {
            stmt.bindString(5, templateType);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(6, logo);
        }
 
        String bottomIcon = entity.getBottomIcon();
        if (bottomIcon != null) {
            stmt.bindString(7, bottomIcon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeUiBean readEntity(Cursor cursor, int offset) {
        HomeUiBean entity = new HomeUiBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tips
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tvMoreUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bgImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // templateType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // logo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // bottomIcon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeUiBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTips(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTvMoreUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBgImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemplateType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLogo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBottomIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeUiBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeUiBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeUiBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
